from mistletoe.latex_token import Math
from mistletoe.token import Token
from mistletoe import span_token, block_token
from mistletoe.base_renderer import BaseRenderer

verb_delimiters: str

class LaTeXRenderer(BaseRenderer[str]):
    packages: dict[str, list[str]]
    verb_delimiters: str
    def __init__(self, *extras: Token) -> None: ...
    def render_strong(self, token: span_token.Strong) -> str: ...
    def render_emphasis(self, token: span_token.Emphasis) -> str: ...
    def render_inline_code(self, token: span_token.RawText) -> str: ...
    def render_strikethrough(self, token: span_token.Strikethrough) -> str: ...
    def render_image(self, token: span_token.Image) -> str: ...
    def render_link(self, token: span_token.Link) -> str: ...
    def render_auto_link(self, token: span_token.AutoLink) -> str: ...
    @staticmethod
    def render_math(token: Math) -> str: ...
    def render_escape_sequence(self, token: span_token.EscapeSequence) -> str: ...
    def render_raw_text(self, token: span_token.RawText, escape: bool = True) -> str: ...
    def render_heading(self, token: block_token.Heading) -> str: ...
    def render_quote(self, token: block_token.Quote) -> str: ...
    def render_paragraph(self, token: block_token.Paragraph) -> str: ...
    def render_block_code(self, token: block_token.BlockCode) -> str: ...
    def render_list(self, token: block_token.List) -> str: ...
    def render_list_item(self, token: block_token.ListItem) -> str: ...
    def render_table(self, token: block_token.Table) -> str: ...
    def render_table_row(self, token: block_token.TableRow) -> str: ...
    def render_table_cell(self, token: block_token.TableCell) -> str: ...
    @staticmethod
    def render_thematic_break(token: block_token.ThematicBreak) -> str: ...
    @staticmethod
    def render_line_break(token: span_token.LineBreak) -> str: ...
    def render_packages(self) -> str: ...
    def render_document(self, token: block_token.Document) -> str: ...
