from _typeshed import Incomplete

from mistletoe import BaseRenderer, block_token, span_token

class Program(block_token.BlockToken):
    children: Incomplete
    def __init__(self, lines) -> None: ...

class Expr(span_token.SpanToken):
    @classmethod
    def find(cls, string): ...

class Number(span_token.SpanToken):
    pattern: Incomplete
    parse_inner: bool
    number: Incomplete
    def __init__(self, match) -> None: ...

class Variable(span_token.SpanToken):
    pattern: Incomplete
    parse_inner: bool
    name: Incomplete
    def __init__(self, match) -> None: ...

class Whitespace(span_token.SpanToken):
    parse_inner: bool
    def __new__(self, _) -> None: ...

class Procedure:
    params: Incomplete
    body: Incomplete
    env: Incomplete
    def __init__(self, expr_token, body, env) -> None: ...

class Scheme(BaseRenderer):
    render_map: Incomplete
    env: Incomplete
    def __init__(self) -> None: ...
    def render_inner(self, token): ...
    def render_expr(self, token): ...
    def render_number(self, token): ...
    def render_variable(self, token): ...
    def define(self, *args) -> None: ...
    def cond(self, *exprs): ...
    def apply(self, proc, args): ...
