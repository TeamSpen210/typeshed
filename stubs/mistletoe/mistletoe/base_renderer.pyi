from typing import Callable, Generic, Self, TypeVar, TypedDict
from types import TracebackType

from mistletoe import block_token, span_token
from mistletoe.token import Token
from mistletoe.core_tokens import _DestTitle


ResultT = TypeVar('ResultT')
class _RenderMap(TypedDict, Generic[ResultT]):
    Strong: Callable[[span_token.Strong], ResultT]
    Emphasis: Callable[[span_token.Emphasis], ResultT]
    InlineCode: Callable[[span_token.Emphasis], ResultT]
    RawText: Callable[[span_token.RawText], ResultT]
    Strikethrough: Callable[[span_token.Strikethrough], ResultT]
    Image: Callable[[span_token.Image], ResultT]
    Link: Callable[[span_token.Link], ResultT]
    AutoLink: Callable[[span_token.AutoLink], ResultT]
    EscapeSequence: Callable[[span_token.EscapeSequence], ResultT]
    Heading: Callable[[block_token.Heading], ResultT]
    SetextHeading: Callable[[block_token.Heading], ResultT]
    Quote: Callable[[block_token.Heading], ResultT]
    Paragraph: Callable[[block_token.Heading], ResultT]
    CodeFence: Callable[[block_token.Heading], ResultT]
    BlockCode: Callable[[block_token.Heading], ResultT]
    List: Callable[[block_token.Heading], ResultT]
    ListItem: Callable[[block_token.Heading], ResultT]
    Table: Callable[[block_token.Table], ResultT]
    TableRow: Callable[[block_token.TableRow], ResultT]
    TableCell: Callable[[block_token.TableCell], ResultT]
    ThematicBreak: Callable[[block_token.ThematicBreak], ResultT]
    LineBreak: Callable[[span_token.LineBreak], ResultT]
    Document: Callable[[block_token.Document], ResultT]


class BaseRenderer(Generic[ResultT]):
    render_map: _RenderMap[ResultT]
    footnotes: dict[str, _DestTitle]
    def __init__(self, *extras: type[Token]) -> None: ...
    def render(self, token: Token) -> ResultT: ...
    def render_inner(self, token: Token) -> str: ...
    def __enter__(self) -> Self: ...
    def __exit__(self, exception_type: type[BaseException] | None, exception_val: BaseException | None, traceback: TracebackType | None) -> None: ...

    def render_raw_text(self, token: span_token.RawText) -> ResultT: ...
    def render_strong(self, token: span_token.Strong) -> ResultT: ...
    def render_emphasis(self, token: span_token.Emphasis) -> ResultT: ...
    def render_inline_code(self, token: span_token.InlineCode) -> ResultT: ...
    def render_strikethrough(self, token: span_token.Strikethrough) -> ResultT: ...
    def render_image(self, token: span_token.Image) -> ResultT: ...
    def render_link(self, token: span_token.Link) -> ResultT: ...
    def render_auto_link(self, token: span_token.AutoLink) -> ResultT: ...
    def render_escape_sequence(self, token: span_token.EscapeSequence) -> ResultT: ...
    def render_line_break(self, token: span_token.LineBreak) -> ResultT: ...
    def render_heading(self, token: block_token.Heading) -> ResultT: ...
    def render_quote(self, token: block_token.Quote) -> ResultT: ...
    def render_paragraph(self, token: block_token.Paragraph) -> ResultT: ...
    def render_block_code(self, token: block_token.BlockCode) -> ResultT: ...
    def render_list(self, token: block_token.List) -> ResultT: ...
    def render_list_item(self, token: block_token.ListItem) -> ResultT: ...
    def render_table(self, token: block_token.Table) -> ResultT: ...
    def render_table_cell(self, token: block_token.TableCell) -> ResultT: ...
    def render_table_row(self, token: block_token.TableRow) -> ResultT: ...
    def render_thematic_break(self, token: block_token.ThematicBreak) -> ResultT: ...
    def render_document(self, token: block_token.Document) -> ResultT: ...
