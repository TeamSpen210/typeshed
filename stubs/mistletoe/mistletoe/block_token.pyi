from _typeshed import Incomplete

from mistletoe import token

class BlockToken(token.Token):
    children: Incomplete
    def __init__(self, lines, tokenize_func) -> None: ...
    def __contains__(self, text) -> bool: ...
    @staticmethod
    def read(lines): ...

class Document(BlockToken):
    footnotes: Incomplete
    children: Incomplete
    def __init__(self, lines) -> None: ...

class Heading(BlockToken):
    repr_attributes: Incomplete
    pattern: Incomplete
    level: int
    content: str
    def __init__(self, match) -> None: ...
    @classmethod
    def start(cls, line): ...
    @classmethod
    def read(cls, lines): ...

class SetextHeading(BlockToken):
    repr_attributes: Incomplete
    level: Incomplete
    def __init__(self, lines) -> None: ...
    @classmethod
    def start(cls, line) -> None: ...
    @classmethod
    def read(cls, lines) -> None: ...

class Quote(BlockToken):
    children: Incomplete
    def __init__(self, parse_buffer) -> None: ...
    @staticmethod
    def start(line): ...
    @classmethod
    def read(cls, lines): ...
    @staticmethod
    def convert_leading_tabs(string): ...

class Paragraph(BlockToken):
    setext_pattern: Incomplete
    parse_setext: bool
    def __new__(cls, lines): ...
    def __init__(self, lines) -> None: ...
    @staticmethod
    def start(line): ...
    @classmethod
    def read(cls, lines): ...
    @classmethod
    def is_setext_heading(cls, line): ...

class BlockCode(BlockToken):
    repr_attributes: Incomplete
    language: str
    children: Incomplete
    def __init__(self, lines) -> None: ...
    @staticmethod
    def start(line): ...
    @classmethod
    def read(cls, lines): ...
    @staticmethod
    def strip(string): ...

class CodeFence(BlockToken):
    repr_attributes: Incomplete
    pattern: Incomplete
    language: Incomplete
    children: Incomplete
    def __init__(self, match) -> None: ...
    @classmethod
    def start(cls, line): ...
    @classmethod
    def read(cls, lines): ...

class List(BlockToken):
    repr_attributes: Incomplete
    pattern: Incomplete
    children: Incomplete
    loose: Incomplete
    def __init__(self, matches) -> None: ...
    @classmethod
    def start(cls, line): ...
    @classmethod
    def read(cls, lines): ...
    @staticmethod
    def same_marker_type(leader, other): ...

class ListItem(BlockToken):
    repr_attributes: Incomplete
    pattern: Incomplete
    continuation_pattern: Incomplete
    leader: Incomplete
    prepend: Incomplete
    children: Incomplete
    loose: Incomplete
    def __init__(self, parse_buffer, prepend, leader) -> None: ...
    @classmethod
    def parse_continuation(cls, line, prepend): ...
    @staticmethod
    def other_token(line): ...
    @classmethod
    def parse_marker(cls, line): ...
    @classmethod
    def read(cls, lines, prev_marker: Incomplete | None = ...): ...

class Table(BlockToken):
    repr_attributes: Incomplete
    column_align: Incomplete
    header: Incomplete
    children: Incomplete
    def __init__(self, lines) -> None: ...
    @staticmethod
    def split_delimiter(delimiter): ...
    @staticmethod
    def parse_align(column): ...
    @staticmethod
    def start(line): ...
    @staticmethod
    def read(lines): ...

class TableRow(BlockToken):
    repr_attributes: Incomplete
    split_pattern: Incomplete
    escaped_pipe_pattern: Incomplete
    row_align: Incomplete
    children: Incomplete
    def __init__(self, line, row_align: Incomplete | None = ...) -> None: ...

class TableCell(BlockToken):
    repr_attributes: Incomplete
    align: Incomplete
    def __init__(self, content, align: Incomplete | None = ...) -> None: ...

class Footnote(BlockToken):
    def __new__(cls, _) -> None: ...
    @classmethod
    def start(cls, line): ...
    @classmethod
    def read(cls, lines): ...
    @classmethod
    def match_reference(cls, string, offset): ...
    @classmethod
    def match_link_label(cls, string, offset): ...
    @classmethod
    def match_link_dest(cls, string, offset): ...
    @classmethod
    def match_link_title(cls, string, offset): ...
    @staticmethod
    def append_footnotes(matches, root) -> None: ...

class ThematicBreak(BlockToken):
    pattern: Incomplete
    def __init__(self, _) -> None: ...
    @classmethod
    def start(cls, line): ...
    @staticmethod
    def read(lines): ...

class HTMLBlock(BlockToken):
    multiblock: Incomplete
    predefined: Incomplete
    custom_tag: Incomplete
    content: Incomplete
    def __init__(self, lines) -> None: ...
    @classmethod
    def start(cls, line): ...
    @classmethod
    def read(cls, lines): ...
