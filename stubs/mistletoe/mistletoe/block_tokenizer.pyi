from collections.abc import Callable, Iterable
from typing import Any, TypeVar
from typing_extensions import Self, TypeAlias

from mistletoe.block_token import BlockToken

_T = TypeVar("_T")
_TokenMaker: TypeAlias = Callable[..., BlockToken]

class FileWrapper:
    lines: list[str]
    def __init__(self, lines: Iterable[str]) -> None: ...
    def __next__(self) -> str: ...
    def __iter__(self) -> Self: ...
    def anchor(self) -> None: ...
    def reset(self) -> None: ...
    def peek(self) -> str: ...
    def backstep(self) -> None: ...

def tokenize(iterable: Iterable[str], token_types: list[_TokenMaker]) -> list[BlockToken]: ...
def tokenize_block(iterable: Iterable[str], token_types: list[_TokenMaker]) -> ParseBuffer: ...

# Tuples are (type, arg), where type(arg) -> BlockToken.
def make_tokens(parse_buffer: Iterable[tuple[_TokenMaker, Any]]) -> list[BlockToken]: ...

class ParseBuffer(list[tuple[_TokenMaker, Any]]):
    loose: bool
    def __init__(self, __iterable: Iterable[tuple[_TokenMaker, Any]] = ...) -> None: ...
    # Narrow this since we can describe the relationship safely.
    def append(self, __object: tuple[Callable[[_T], BlockToken], _T]) -> None: ...
