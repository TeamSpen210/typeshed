from collections.abc import Iterable
from typing import Literal

from mistletoe.core_tokens import MatchObj
from mistletoe.span_token import SpanToken

def tokenize(string: str, token_types: Iterable[type[SpanToken]]) -> list[SpanToken]: ...
def find_tokens(string: str, token_types: Iterable[type[SpanToken]], fallback_token: type[SpanToken]) -> list[ParseToken]: ...
def eval_tokens(x: ParseToken, y: ParseToken, token_buffer: list[ParseToken]) -> ParseToken: ...
def eval_new_child(parent: ParseToken, child: ParseToken) -> None: ...
def relation(x: ParseToken, y: ParseToken) -> Literal[0, 1, 2, 3]: ...
def make_tokens(
    tokens: Iterable[ParseToken], start: int, end: int, string: str, fallback_token: type[SpanToken]
) -> list[SpanToken]: ...

class ParseToken:
    start: int
    end: int
    parse_start: int
    parse_end: int
    match: MatchObj
    string: str
    cls: type[SpanToken]
    fallback_token: SpanToken
    children: list[ParseToken]
    def __init__(self, start: int, end: int, match: MatchObj, string: str, cls, fallback_token) -> None: ...
    def append_child(self, child: ParseToken) -> None: ...
    def make(self) -> type[SpanToken]: ...
    def __lt__(self, other: ParseToken) -> bool: ...
