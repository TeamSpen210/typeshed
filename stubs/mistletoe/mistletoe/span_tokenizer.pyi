from _typeshed import Incomplete

def tokenize(string, token_types): ...
def find_tokens(string, token_types, fallback_token): ...
def eval_tokens(x, y, token_buffer): ...
def eval_new_child(parent, child) -> None: ...
def relation(x, y): ...
def make_tokens(tokens, start, end, string, fallback_token): ...

class ParseToken:
    start: Incomplete
    end: Incomplete
    parse_start: Incomplete
    parse_end: Incomplete
    match: Incomplete
    string: Incomplete
    cls: Incomplete
    fallback_token: Incomplete
    children: Incomplete
    def __init__(self, start, end, match, string, cls, fallback_token) -> None: ...
    def append_child(self, child) -> None: ...
    def make(self): ...
    def __lt__(self, other): ...
