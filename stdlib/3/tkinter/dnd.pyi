from typing import Protocol, Optional
from tkinter import Tk, Event, Misc

# Widgets involved in the drag process
class _DragWidget(Protocol):
    def dnd_accept(self, source:_DragWidget, event: Event) -> Optional[_DragWidget]: ...
    def dnd_enter(self, source: _DragWidget, event: Event) -> None: ...
    def dnd_motion(self, source: _DragWidget, event: Event) -> None: ...
    def dnd_leave(self, source: _DragWidget, event: Event) -> None: ...
    def dnd_commit(self, source: _DragWidget, event: Event) -> None: ...

def dnd_start(source: _DragWidget, event: Event) -> Optional[DndHandler]: ...

class DndHandler:
    root: Tk
    source: _DragWidget
    target: ...
    initial_button: int
    initial_widget: Misc
    release_pattern: str
    save_cursor: str

    def __init__(self, source: _DragWidget, event: Event) -> None: ...
    def __del__(self) -> None: ...
    def on_motion(self, event: Event) -> None: ...
    def on_release(self, event: Event) -> None: ...
    def cancel(self, event: Event=None) -> None: ...
    def finish(self, event: Event, commit: int=0) -> None: ...
