from tkinter import Frame, Entry, Button, Tk, Toplevel, Listbox, Scrollbar, commondialog, Event, Misc
from typing import Any, Tuple, Union, Hashable, Optional, ClassVar, Dict, List, IO

dialogstates: Dict[Any, Tuple[str, str]]

class FileDialog:
    title: ClassVar[str]

    master: Union[Toplevel, Tk]
    directory: Optional[str]

    top: Toplevel
    botframe: Frame
    selection: Entry
    filter: Entry
    midframe: Frame
    filesbar: Scrollbar
    files: Listbox
    dirsbar: Scrollbar
    dirs: Listbox
    ok_button: Button
    filter_button: Button
    cancel_button: Button

    def __init__(self, master: Union[Toplevel, Tk], title: str = ...) -> None: ...
    def go(self, dir_or_file: str = ..., pattern: str = ..., default: str = ..., key: Hashable = None) -> Optional[str]: ...
    def quit(self, how: str = ...) -> None: ...
    def dirs_double_event(self, event: Event) -> None: ...
    def dirs_select_event(self, event: Event) -> None: ...
    def files_double_event(self, event: Event) -> None: ...
    def files_select_event(self, event: Event) -> None: ...
    def ok_event(self, event: Event) -> None: ...
    def ok_command(self) -> None: ...
    def filter_command(self, event: Event = None) -> None: ...
    def get_filter(self) -> List[str]: ...
    def get_selection(self) -> str: ...
    def cancel_command(self, event: Event = None) -> None: ...
    def set_filter(self, dir: str, pat: str) -> None: ...
    def set_selection(self, file: str) -> None: ...

class LoadFileDialog(FileDialog):
    title: ClassVar[str]
    def ok_command(self) -> None: ...

class SaveFileDialog(FileDialog):
    title: ClassVar[str]
    def ok_command(self) -> None: ...

class _Dialog(commondialog.Dialog): ...

class Open(_Dialog):
    command: ClassVar[str]

class SaveAs(_Dialog):
    command: ClassVar[str]

# the directory dialog has its own _fix routines.
class Directory(commondialog.Dialog):
    command: ClassVar[str]

def askopenfilename(*, defaultextension: str = ..., filetypes: Union[List[Tuple[str, str]], Tuple[Tuple[str, str], ...]] = ..., initialdir: str = ..., parent: Misc = ..., title: str = ...) -> str: ...
def asksaveasfilename(*, defaultextension: str = ..., filetypes: Union[List[Tuple[str, str]], Tuple[Tuple[str, str], ...]] = ..., initialdir: str = ..., parent: Misc = ..., title: str = ..., multiple: int = ...) -> str: ...
def askopenfilenames(*, defaultextension: str = ..., filetypes: Union[List[Tuple[str, str]], Tuple[Tuple[str, str], ...]] = ..., initialdir: str = ..., parent: Misc = ..., title: str = ...) -> List[str]: ...
def askdirectory (*, initialdir: str = ..., parent: Misc = ..., title: str = ..., mustexist: int = ...) -> str: ...

# TODO: These need open()'s special-casing to handle mode correctly.
def askopenfile(mode: str = ..., *, defaultextension: str = ..., filetypes: Union[List[Tuple[str, str]], Tuple[Tuple[str, str], ...]] = ..., initialdir: str = ..., parent: Misc = ..., title: str = ...) -> Optional[IO]: ...
def askopenfiles(mode: str = ..., *, defaultextension: str = ..., filetypes: Union[List[Tuple[str, str]], Tuple[Tuple[str, str], ...]] = ..., initialdir: str = ..., parent: Misc = ..., title: str = ...) -> List[IO]: ...
def asksaveasfile(mode: str = ..., *, defaultextension: str = ..., filetypes: Union[List[Tuple[str, str]], Tuple[Tuple[str, str], ...]] = ..., initialdir: str = ..., parent: Misc = ..., title: str = ...) -> Optional[IO]: ...
